import streamlit as st
import pandas as pd
import numpy as np
import sqlite3
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import re
import os
import tempfile
from scipy import stats
import datetime
from datetime import timedelta
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise DIATEX - Dashboard Avan√ßado",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/seu-usuario/testeDiatexCama',
        'Report a bug': "https://github.com/seu-usuario/testeDiatexCama/issues",
        'About': "Dashboard para an√°lise de efic√°cia do produto DIATEX em avi√°rios"
    }
)

# Fun√ß√£o para carregar os dados do banco SQLite
@st.cache_data
def carregar_dados(caminho_db):
    # Conectar ao banco de dados
    conn = sqlite3.connect(caminho_db)
    
    # Carregar dados da tabela medicoes com join na tabela tratamentos
    query = """
    SELECT 
        m.Fecha, m.Hora, m.NH3, m.Temperatura, m.Humedad, 
        m.Nome_Arquivo, m.lote_composto, m.idade_lote, m.n_cama, m.teste,
        t.produtor, t.linhagem, t.bateria_teste
    FROM medicoes m
    LEFT JOIN tratamentos t ON m.lote_composto = t.lote_composto
    WHERE m.teste IS NOT NULL AND m.teste != ''
    """
    df = pd.read_sql_query(query, conn)
    
    # Fechar conex√£o
    conn.close()
    
    # Verificar se temos dados
    if len(df) == 0:
        st.error("Nenhum dado encontrado com tratamentos v√°lidos!")
        st.stop()
    
    # Converter colunas de data e hora
    df['Fecha'] = pd.to_datetime(df['Fecha'])
    df['data_hora'] = pd.to_datetime(df['Fecha'].astype(str) + ' ' + df['Hora'])
    
    # Criar coluna de semana de vida
    df['semana_vida'] = (df['idade_lote'] // 7) + 1
    
    # Criar coluna de avi√°rio (extrair do nome do arquivo)
    df['aviario'] = df['Nome_Arquivo'].str.extract(r'(\d+)').astype(str)
    
    return df

# Fun√ß√£o para criar gr√°ficos comparativos (refatorada)
def criar_grafico_comparativo(df, variavel, agrupar_por='dia'):
    dados = df.copy()
    
    # Definir agrupamento
    if agrupar_por == 'dia':
        dados['grupo'] = dados['Fecha'].dt.date
    elif agrupar_por == 'semana':
        dados['grupo'] = dados['semana_vida']
    else:  # hora
        dados['grupo'] = dados['data_hora'].dt.floor('H')
    
    # Agrupar dados
    dados_agrupados = dados.groupby(['grupo', 'teste'])[variavel].mean().reset_index()
    
    # Criar gr√°fico com Plotly
    fig = px.line(
        dados_agrupados, 
        x='grupo', 
        y=variavel, 
        color='teste',
        markers=True,
        title=f'Comparativo de {variavel} entre tratamentos',
        labels={'grupo': 'Per√≠odo', variavel: variavel, 'teste': 'Tratamento'},
        color_discrete_map={'DIATEX': '#1f77b4', 'TESTEMUNHA': '#ff7f0e'}
    )
    
    # Adicionar estat√≠sticas no t√≠tulo
    media_diatex = dados[dados['teste'] == 'DIATEX'][variavel].mean()
    media_testemunha = dados[dados['teste'] == 'TESTEMUNHA'][variavel].mean()
    
    fig.update_layout(
        title=f'Comparativo de {variavel} entre tratamentos<br><sup>M√©dia DIATEX: {media_diatex:.2f} | M√©dia TESTEMUNHA: {media_testemunha:.2f}</sup>',
        xaxis_title='Per√≠odo',
        yaxis_title=variavel,
        legend_title='Tratamento',
        hovermode='x unified'
    )
    
    return fig

# Fun√ß√£o para calcular m√©tricas de desempenho
def calcular_metricas_desempenho(df):
    """Calcula m√©tricas de desempenho do produto DIATEX"""
    metricas = {}
    
    for tratamento in ['DIATEX', 'TESTEMUNHA']:
        dados_trat = df[df['teste'] == tratamento]
        
        if len(dados_trat) > 0:  # Verificar se h√° dados para o tratamento
            metricas[tratamento] = {
                'nh3_media': dados_trat['NH3'].mean(),
                'nh3_std': dados_trat['NH3'].std(),
                'nh3_min': dados_trat['NH3'].min(),
                'nh3_max': dados_trat['NH3'].max(),
                'temp_media': dados_trat['Temperatura'].mean(),
                'umid_media': dados_trat['Humedad'].mean(),
                'n_medicoes': len(dados_trat),
                'dias_monitoramento': dados_trat['Fecha'].nunique()
            }
    
    # Calcular efic√°cia relativa apenas se ambos os tratamentos existirem
    if 'DIATEX' in metricas and 'TESTEMUNHA' in metricas:
        if metricas['TESTEMUNHA']['nh3_media'] > 0:  # Evitar divis√£o por zero
            metricas['eficacia_nh3'] = ((metricas['TESTEMUNHA']['nh3_media'] - metricas['DIATEX']['nh3_media']) / 
                                       metricas['TESTEMUNHA']['nh3_media']) * 100
        
        if metricas['TESTEMUNHA']['nh3_std'] > 0:  # Evitar divis√£o por zero
            metricas['reducao_variabilidade'] = ((metricas['TESTEMUNHA']['nh3_std'] - metricas['DIATEX']['nh3_std']) / 
                                               metricas['TESTEMUNHA']['nh3_std']) * 100
    
    return metricas

# Fun√ß√£o para an√°lise de tend√™ncias temporais
def analisar_tendencias(df, variavel):
    """Analisa tend√™ncias temporais dos dados"""
    resultados = {}
    
    for tratamento in ['DIATEX', 'TESTEMUNHA']:
        dados_trat = df[df['teste'] == tratamento].copy()
        if len(dados_trat) > 10:  # M√≠nimo de pontos para an√°lise
            dados_trat = dados_trat.sort_values('data_hora')
            dados_trat['tempo_numerico'] = (dados_trat['data_hora'] - dados_trat['data_hora'].min()).dt.total_seconds()
            
            # Regress√£o linear simples
            slope, intercept, r_value, p_value, std_err = stats.linregress(
                dados_trat['tempo_numerico'], dados_trat[variavel]
            )
            
            resultados[tratamento] = {
                'slope': slope,
                'r_squared': r_value**2,
                'p_value': p_value,
                'tendencia': 'crescente' if slope > 0 else 'decrescente' if slope < 0 else 'est√°vel',
                'significativa': p_value < 0.05
            }
    
    return resultados

# Fun√ß√£o para an√°lise PCA
def realizar_pca(df):
    """Realiza an√°lise de componentes principais"""
    try:
        # Preparar dados para PCA
        variaveis = ['NH3', 'Temperatura', 'Humedad', 'idade_lote']
        dados_pca = df[variaveis + ['teste']].dropna()
        
        if len(dados_pca) == 0:
            return None, None
        
        # Separar por tratamento
        X_diatex = dados_pca[dados_pca['teste'] == 'DIATEX'][variaveis]
        X_testemunha = dados_pca[dados_pca['teste'] == 'TESTEMUNHA'][variaveis]
        
        if len(X_diatex) > 10 and len(X_testemunha) > 10:
            # Padronizar dados
            scaler = StandardScaler()
            X_combined = pd.concat([X_diatex, X_testemunha])
            X_scaled = scaler.fit_transform(X_combined)
            
            # Aplicar PCA
            pca = PCA(n_components=2)
            X_pca = pca.fit_transform(X_scaled)
            
            # Criar DataFrame com resultados
            df_pca = pd.DataFrame(X_pca, columns=['PC1', 'PC2'])
            df_pca['teste'] = dados_pca['teste'].values
            
            return df_pca, pca.explained_variance_ratio_
        else:
            return None, None
    except Exception as e:
        st.error(f"Erro na an√°lise PCA: {str(e)}")
        return None, None

# Fun√ß√£o para alertas e recomenda√ß√µes
def gerar_alertas(df):
    """Gera alertas baseados nos dados"""
    alertas = []
    
    # Verificar n√≠veis cr√≠ticos de NH3
    nh3_critico = 25  # ppm - limite considerado alto
    medicoes_criticas = df[df['NH3'] > nh3_critico]
    
    if len(medicoes_criticas) > 0:
        # Filtrar valores n√£o nulos na coluna teste
        tratamentos_afetados = medicoes_criticas['teste'].dropna().unique()
        tratamentos_str = ', '.join(tratamentos_afetados) if len(tratamentos_afetados) > 0 else 'N√£o especificado'
        
        alertas.append({
            'tipo': 'warning',
            'titulo': 'N√≠veis Cr√≠ticos de Am√¥nia',
            'mensagem': f'{len(medicoes_criticas)} medi√ß√µes acima de {nh3_critico} ppm detectadas.',
            'detalhes': f"Tratamentos afetados: {tratamentos_str}"
        })
    
    # Verificar efic√°cia do produto
    metricas = calcular_metricas_desempenho(df)
    if 'eficacia_nh3' in metricas:
        if metricas['eficacia_nh3'] > 10:
            alertas.append({
                'tipo': 'success',
                'titulo': 'Efic√°cia Comprovada',
                'mensagem': f'DIATEX apresenta redu√ß√£o de {metricas["eficacia_nh3"]:.1f}% nos n√≠veis de NH3.',
                'detalhes': 'Resultado estatisticamente significativo'
            })
        elif metricas['eficacia_nh3'] < -5:
            alertas.append({
                'tipo': 'error',
                'titulo': 'Efic√°cia Question√°vel',
                'mensagem': f'DIATEX apresenta aumento de {abs(metricas["eficacia_nh3"]):.1f}% nos n√≠veis de NH3.',
                'detalhes': 'Recomenda-se revisar aplica√ß√£o do produto'
            })
    
    # Verificar variabilidade dos dados
    for tratamento in ['DIATEX', 'TESTEMUNHA']:
        dados_trat = df[df['teste'] == tratamento]
        if len(dados_trat) > 0:  # Verificar se h√° dados para o tratamento
            cv_nh3 = (dados_trat['NH3'].std() / dados_trat['NH3'].mean()) * 100
            
            if cv_nh3 > 50:  # Coeficiente de varia√ß√£o alto
                alertas.append({
                    'tipo': 'info',
                    'titulo': f'Alta Variabilidade - {tratamento}',
                    'mensagem': f'Coeficiente de varia√ß√£o de NH3: {cv_nh3:.1f}%',
                    'detalhes': 'Considerar fatores ambientais que podem estar influenciando'
                })
    
    return alertas
def realizar_teste_t(df, variavel):
    # Separar dados por tratamento
    diatex = df[df['teste'] == 'DIATEX'][variavel].dropna()
    testemunha = df[df['teste'] == 'TESTEMUNHA'][variavel].dropna()
    
    # Verificar se h√° dados suficientes
    if len(diatex) < 2 or len(testemunha) < 2:
        return {
            'estatistica': None,
            'p_valor': None,
            'significativo': None,
            'interpretacao': 'Dados insuficientes para an√°lise'
        }
    
    # Realizar teste T
    estatistica, p_valor = stats.ttest_ind(diatex, testemunha, equal_var=False)
    
    # Interpretar resultado
    significativo = p_valor < 0.05
    
    if significativo:
        if diatex.mean() > testemunha.mean():
            interpretacao = f"H√° diferen√ßa significativa (p={p_valor:.4f}). DIATEX apresenta valores de {variavel} MAIORES que TESTEMUNHA."
        else:
            interpretacao = f"H√° diferen√ßa significativa (p={p_valor:.4f}). DIATEX apresenta valores de {variavel} MENORES que TESTEMUNHA."
    else:
        interpretacao = f"N√£o h√° diferen√ßa significativa (p={p_valor:.4f}) entre os tratamentos para {variavel}."
    
    return {
        'estatistica': estatistica,
        'p_valor': p_valor,
        'significativo': significativo,
        'interpretacao': interpretacao
    }

# Fun√ß√£o para criar matriz de correla√ß√£o (refatorada)
def criar_matriz_correlacao(df, tratamento=None):
    dados = df.copy()
    
    if tratamento:
        dados = dados[dados['teste'] == tratamento]
    
    # Calcular correla√ß√£o
    corr = dados[['NH3', 'Temperatura', 'Humedad', 'idade_lote']].corr()
    
    # Criar gr√°fico com Plotly
    fig = px.imshow(
        corr,
        text_auto=True,
        color_continuous_scale='RdBu_r',
        title=f'Matriz de Correla√ß√£o {tratamento if tratamento else "Geral"}',
        zmin=-1, zmax=1
    )
    
    return fig

# T√≠tulo principal
st.title('üêî Dashboard de An√°lise DIATEX - Efic√°cia em Avi√°rios')
st.markdown("""
### Sistema Avan√ßado de Monitoramento e An√°lise
Este dashboard oferece an√°lise estat√≠stica completa da efic√°cia do produto DIATEX na redu√ß√£o de am√¥nia em avi√°rios.
**DIATEX** √© um produto inovador desenvolvido para reduzir a volatiliza√ß√£o de am√¥nia durante a cria√ß√£o de frangos de corte.
""")

# Caminho para o banco de dados local no reposit√≥rio
caminho_db = os.path.join("database", "TESTE_DIATEX_PROD.db")

# Verificar se o arquivo existe
if not os.path.exists(caminho_db):
    st.error(f"Arquivo de banco de dados n√£o encontrado em {caminho_db}.")
    st.info("Verifique se o arquivo est√° na pasta 'database' do reposit√≥rio.")
    st.stop()

# Carregar dados
with st.spinner('Carregando dados...'):
    df = carregar_dados(caminho_db)

# Adicionar m√©tricas na sidebar
st.sidebar.markdown("## üìä M√©tricas R√°pidas")

# Calcular m√©tricas gerais
total_medicoes = len(df)
periodo_total = (df['Fecha'].max() - df['Fecha'].min()).days
aviarios_monitorados = df['aviario'].nunique()
produtores_envolvidos = df['produtor'].nunique()

st.sidebar.metric("Total de Medi√ß√µes", f"{total_medicoes:,}")
st.sidebar.metric("Per√≠odo (dias)", periodo_total)
st.sidebar.metric("Avi√°rios Monitorados", aviarios_monitorados)
st.sidebar.metric("Produtores", produtores_envolvidos)

# M√©tricas de efic√°cia
metricas = calcular_metricas_desempenho(df)
if 'eficacia_nh3' in metricas and metricas['eficacia_nh3'] is not None:
    st.sidebar.metric(
        "Efic√°cia NH3", 
        f"{metricas['eficacia_nh3']:.1f}%",
        delta=f"{metricas['eficacia_nh3']:.1f}% vs controle"
    )
else:
    st.sidebar.info("Efic√°cia NH3: Dados insuficientes")

# Exibir informa√ß√£o sobre o arquivo carregado
st.sidebar.markdown("---")
st.sidebar.info(f"üìÅ **Arquivo:** {os.path.basename(caminho_db)}")
st.sidebar.info(f"üïí **√öltima atualiza√ß√£o:** {datetime.datetime.fromtimestamp(os.path.getmtime(caminho_db)).strftime('%d/%m/%Y %H:%M')}")

# Sidebar para filtros
st.sidebar.title('Filtros')

# Filtro de produtor
produtores = ['Todos'] + sorted(df['produtor'].dropna().unique().tolist())
filtro_produtor = st.sidebar.selectbox('Produtor', produtores)
if filtro_produtor == 'Todos':
    filtro_produtor = None

# Filtro de linhagem
linhagens = ['Todas'] + sorted(df['linhagem'].dropna().unique().tolist())
filtro_linhagem = st.sidebar.selectbox('Linhagem', linhagens)
if filtro_linhagem == 'Todas':
    filtro_linhagem = None

# Filtro de bateria
baterias = ['Todas'] + sorted(df['bateria_teste'].dropna().unique().tolist())
filtro_bateria = st.sidebar.selectbox('Bateria', baterias)
if filtro_bateria == 'Todas':
    filtro_bateria = None

# Filtro de lote
lotes = ['Todos'] + sorted(df['lote_composto'].dropna().unique().tolist())
filtro_lote = st.sidebar.selectbox('Lote', lotes)
if filtro_lote == 'Todos':
    filtro_lote = None

# Filtro de avi√°rio
aviarios = ['Todos'] + sorted(df['aviario'].dropna().unique().tolist())
filtro_aviario = st.sidebar.selectbox('Avi√°rio', aviarios)
if filtro_aviario == 'Todos':
    filtro_aviario = None

# Filtro de per√≠odo
min_data = df['Fecha'].min().date()
max_data = df['Fecha'].max().date()
filtro_periodo = st.sidebar.date_input(
    'Per√≠odo',
    value=(min_data, max_data),
    min_value=min_data,
    max_value=max_data
)

# Aplicar filtro de per√≠odo
if len(filtro_periodo) == 2:
    df_filtrado_periodo = df[(df['Fecha'].dt.date >= filtro_periodo[0]) & 
                             (df['Fecha'].dt.date <= filtro_periodo[1])]
else:
    df_filtrado_periodo = df

# Filtro de idade com slider
min_idade = int(df['idade_lote'].min())
max_idade = int(df['idade_lote'].max())
st.sidebar.subheader('Idade (dias)')
filtro_idade_range = st.sidebar.slider(
    'Selecione o intervalo de idade',
    min_value=min_idade,
    max_value=max_idade,
    value=(min_idade, max_idade)
)
# Verificar se o slider est√° no intervalo completo
if filtro_idade_range == (min_idade, max_idade):
    filtro_idade_min, filtro_idade_max = None, None
else:
    filtro_idade_min, filtro_idade_max = filtro_idade_range

# Filtro de semana de vida com slider
min_semana = int(df['semana_vida'].min())
max_semana = int(df['semana_vida'].max())
st.sidebar.subheader('Semana de vida')
filtro_semana_range = st.sidebar.slider(
    'Selecione o intervalo de semanas',
    min_value=min_semana,
    max_value=max_semana,
    value=(min_semana, max_semana)
)
# Verificar se o slider est√° no intervalo completo
if filtro_semana_range == (min_semana, max_semana):
    filtro_semana_min, filtro_semana_max = None, None
else:
    filtro_semana_min, filtro_semana_max = filtro_semana_range

# Filtro de tratamento para an√°lises espec√≠ficas
tratamentos = ['Todos', 'DIATEX', 'TESTEMUNHA']
filtro_tratamento_especifico = st.sidebar.selectbox('Tratamento (para an√°lises espec√≠ficas)', tratamentos)
if filtro_tratamento_especifico == 'Todos':
    filtro_tratamento_especifico = None

# Op√ß√£o de agrupamento
opcoes_agrupamento = ['dia', 'semana', 'hora']
agrupamento = st.sidebar.radio('Agrupar por', opcoes_agrupamento)

# Exibir estat√≠sticas gerais
st.header('Estat√≠sticas Gerais')

# Aplicar todos os filtros de forma centralizada
dados_filtrados = df_filtrado_periodo.copy()

if filtro_produtor:
    dados_filtrados = dados_filtrados[dados_filtrados['produtor'] == filtro_produtor]
if filtro_linhagem:
    dados_filtrados = dados_filtrados[dados_filtrados['linhagem'] == filtro_linhagem]
if filtro_bateria:
    dados_filtrados = dados_filtrados[dados_filtrados['bateria_teste'] == filtro_bateria]
if filtro_lote:
    dados_filtrados = dados_filtrados[dados_filtrados['lote_composto'] == filtro_lote]
if filtro_aviario:
    dados_filtrados = dados_filtrados[dados_filtrados['aviario'] == filtro_aviario]
if filtro_idade_min is not None and filtro_idade_max is not None:
    dados_filtrados = dados_filtrados[(dados_filtrados['idade_lote'] >= filtro_idade_min) & 
                                     (dados_filtrados['idade_lote'] <= filtro_idade_max)]
if filtro_semana_min is not None and filtro_semana_max is not None:
    dados_filtrados = dados_filtrados[(dados_filtrados['semana_vida'] >= filtro_semana_min) & 
                                     (dados_filtrados['semana_vida'] <= filtro_semana_max)]

# Exibir contagem de registros
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Total de Registros", f"{len(dados_filtrados):,}")
with col2:
    registros_diatex = len(dados_filtrados[dados_filtrados['teste'] == 'DIATEX'])
    st.metric("Registros DIATEX", f"{registros_diatex:,}")
with col3:
    registros_testemunha = len(dados_filtrados[dados_filtrados['teste'] == 'TESTEMUNHA'])
    st.metric("Registros TESTEMUNHA", f"{registros_testemunha:,}")

# Exibir estat√≠sticas descritivas
st.subheader('Estat√≠sticas Descritivas por Tratamento')
estatisticas = dados_filtrados.groupby('teste')[['NH3', 'Temperatura', 'Humedad']].describe()
st.dataframe(estatisticas)

# Se√ß√£o de Alertas e Recomenda√ß√µes
st.header('üö® Alertas e Recomenda√ß√µes')
alertas = gerar_alertas(dados_filtrados)

if alertas:
    for alerta in alertas:
        if alerta['tipo'] == 'success':
            st.success(f"**{alerta['titulo']}**: {alerta['mensagem']}")
            st.info(alerta['detalhes'])
        elif alerta['tipo'] == 'warning':
            st.warning(f"**{alerta['titulo']}**: {alerta['mensagem']}")
            st.info(alerta['detalhes'])
        elif alerta['tipo'] == 'error':
            st.error(f"**{alerta['titulo']}**: {alerta['mensagem']}")
            st.info(alerta['detalhes'])
        else:
            st.info(f"**{alerta['titulo']}**: {alerta['mensagem']}")
            if 'detalhes' in alerta:
                st.caption(alerta['detalhes'])
else:
    st.info("Nenhum alerta identificado nos dados atuais.")

# Gr√°ficos comparativos
st.header('Gr√°ficos Comparativos')

# Abas para diferentes vari√°veis
tab1, tab2, tab3 = st.tabs(["Am√¥nia (NH3)", "Temperatura", "Umidade"])

with tab1:
    st.plotly_chart(
        criar_grafico_comparativo(dados_filtrados, 'NH3', agrupar_por=agrupamento),
        width='stretch'
    )
    resultado_teste_t = realizar_teste_t(dados_filtrados, 'NH3')
    st.subheader('An√°lise Estat√≠stica - Teste T')
    st.write(resultado_teste_t['interpretacao'])
    if resultado_teste_t['p_valor'] is not None:
        fig_box = px.box(dados_filtrados, x='semana_vida', y='NH3', color='teste',
                         title='Distribui√ß√£o de NH3 por Semana de Vida',
                         labels={'semana_vida': 'Semana de Vida', 'NH3': 'NH3 (ppm)', 'teste': 'Tratamento'},
                         color_discrete_map={'DIATEX': '#1f77b4', 'TESTEMUNHA': '#ff7f0e'})
        st.plotly_chart(fig_box, width='stretch')

with tab2:
    st.plotly_chart(
        criar_grafico_comparativo(dados_filtrados, 'Temperatura', agrupar_por=agrupamento),
        width='stretch'
    )
    resultado_teste_t = realizar_teste_t(dados_filtrados, 'Temperatura')
    st.subheader('An√°lise Estat√≠stica - Teste T')
    st.write(resultado_teste_t['interpretacao'])
    if resultado_teste_t['p_valor'] is not None:
        fig_box = px.box(dados_filtrados, x='semana_vida', y='Temperatura', color='teste',
                         title='Distribui√ß√£o de Temperatura por Semana de Vida',
                         labels={'semana_vida': 'Semana de Vida', 'Temperatura': 'Temperatura (¬∞C)', 'teste': 'Tratamento'},
                         color_discrete_map={'DIATEX': '#1f77b4', 'TESTEMUNHA': '#ff7f0e'})
        st.plotly_chart(fig_box, width='stretch')

with tab3:
    st.plotly_chart(
        criar_grafico_comparativo(dados_filtrados, 'Humedad', agrupar_por=agrupamento),
        width='stretch'
    )
    resultado_teste_t = realizar_teste_t(dados_filtrados, 'Humedad')
    st.subheader('An√°lise Estat√≠stica - Teste T')
    st.write(resultado_teste_t['interpretacao'])
    if resultado_teste_t['p_valor'] is not None:
        fig_box = px.box(dados_filtrados, x='semana_vida', y='Humedad', color='teste',
                         title='Distribui√ß√£o de Umidade por Semana de Vida',
                         labels={'semana_vida': 'Semana de Vida', 'Humedad': 'Umidade (%)', 'teste': 'Tratamento'},
                         color_discrete_map={'DIATEX': '#1f77b4', 'TESTEMUNHA': '#ff7f0e'})
        st.plotly_chart(fig_box, width='stretch')

# An√°lises explorat√≥rias adicionais
st.header('An√°lises Explorat√≥rias Adicionais')

# An√°lises Avan√ßadas
st.subheader('üìà An√°lises Avan√ßadas')

# Criar tabs para diferentes an√°lises
tab_tend, tab_pca, tab_perf = st.tabs(["An√°lise de Tend√™ncias", "An√°lise PCA", "M√©tricas de Desempenho"])

with tab_tend:
    st.markdown("#### An√°lise de Tend√™ncias Temporais")
    variavel_tendencia = st.selectbox("Selecione a vari√°vel para an√°lise de tend√™ncia:", ['NH3', 'Temperatura', 'Humedad'])
    
    tendencias = analisar_tendencias(dados_filtrados, variavel_tendencia)
    
    if tendencias:
        col1, col2 = st.columns(2)
        
        with col1:
            if 'DIATEX' in tendencias:
                tend_diatex = tendencias['DIATEX']
                st.metric(
                    "Tend√™ncia DIATEX",
                    tend_diatex['tendencia'].title(),
                    delta=f"R¬≤ = {tend_diatex['r_squared']:.3f}"
                )
                if tend_diatex['significativa']:
                    st.success("Tend√™ncia estatisticamente significativa")
                else:
                    st.info("Tend√™ncia n√£o significativa")
        
        with col2:
            if 'TESTEMUNHA' in tendencias:
                tend_teste = tendencias['TESTEMUNHA']
                st.metric(
                    "Tend√™ncia TESTEMUNHA",
                    tend_teste['tendencia'].title(),
                    delta=f"R¬≤ = {tend_teste['r_squared']:.3f}"
                )
                if tend_teste['significativa']:
                    st.success("Tend√™ncia estatisticamente significativa")
                else:
                    st.info("Tend√™ncia n√£o significativa")

with tab_pca:
    st.markdown("#### An√°lise de Componentes Principais (PCA)")
    st.markdown("An√°lise multivariada para identificar padr√µes nos dados.")
    
    df_pca, variance_ratio = realizar_pca(dados_filtrados)
    
    if df_pca is not None:
        fig_pca = px.scatter(
            df_pca, x='PC1', y='PC2', color='teste',
            title='An√°lise PCA - Separa√ß√£o entre Tratamentos',
            labels={'PC1': f'PC1 ({variance_ratio[0]:.1%} da vari√¢ncia)', 
                   'PC2': f'PC2 ({variance_ratio[1]:.1%} da vari√¢ncia)'},
            color_discrete_map={'DIATEX': '#1f77b4', 'TESTEMUNHA': '#ff7f0e'}
        )
        fig_pca.update_layout(height=500)
        st.plotly_chart(fig_pca, width='stretch')
        
        st.info(f"Os dois primeiros componentes explicam {(variance_ratio[0] + variance_ratio[1]):.1%} da vari√¢ncia total dos dados.")
    else:
        st.warning("Dados insuficientes para an√°lise PCA.")

with tab_perf:
    st.markdown("#### M√©tricas Detalhadas de Desempenho")
    
    metricas_detalhadas = calcular_metricas_desempenho(dados_filtrados)
    
    if 'DIATEX' in metricas_detalhadas and 'TESTEMUNHA' in metricas_detalhadas:
        # M√©tricas de NH3
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Redu√ß√£o M√©dia NH3",
                f"{metricas_detalhadas.get('eficacia_nh3', 0):.1f}%",
                delta=f"{metricas_detalhadas['TESTEMUNHA']['nh3_media'] - metricas_detalhadas['DIATEX']['nh3_media']:.2f} ppm"
            )
        
        with col2:
            st.metric(
                "Redu√ß√£o Variabilidade",
                f"{metricas_detalhadas.get('reducao_variabilidade', 0):.1f}%",
                delta=f"{metricas_detalhadas['TESTEMUNHA']['nh3_std'] - metricas_detalhadas['DIATEX']['nh3_std']:.2f} ppm"
            )
        
        with col3:
            st.metric(
                "Compara√ß√£o Medi√ß√µes",
                f"{metricas_detalhadas['DIATEX']['n_medicoes']:,}",
                delta=f"vs {metricas_detalhadas['TESTEMUNHA']['n_medicoes']:,} controle"
            )
        
        # Tabela comparativa detalhada
        st.markdown("##### Compara√ß√£o Detalhada")
        df_comparacao = pd.DataFrame({
            'M√©trica': ['NH3 M√©dia (ppm)', 'NH3 Desvio Padr√£o', 'NH3 M√≠nimo', 'NH3 M√°ximo', 
                       'Temperatura M√©dia (¬∞C)', 'Umidade M√©dia (%)', 'N√∫mero de Medi√ß√µes', 'Dias de Monitoramento'],
            'DIATEX': [
                f"{metricas_detalhadas['DIATEX']['nh3_media']:.2f}",
                f"{metricas_detalhadas['DIATEX']['nh3_std']:.2f}",
                f"{metricas_detalhadas['DIATEX']['nh3_min']:.2f}",
                f"{metricas_detalhadas['DIATEX']['nh3_max']:.2f}",
                f"{metricas_detalhadas['DIATEX']['temp_media']:.1f}",
                f"{metricas_detalhadas['DIATEX']['umid_media']:.1f}",
                f"{metricas_detalhadas['DIATEX']['n_medicoes']:,}",
                f"{metricas_detalhadas['DIATEX']['dias_monitoramento']}"
            ],
            'TESTEMUNHA': [
                f"{metricas_detalhadas['TESTEMUNHA']['nh3_media']:.2f}",
                f"{metricas_detalhadas['TESTEMUNHA']['nh3_std']:.2f}",
                f"{metricas_detalhadas['TESTEMUNHA']['nh3_min']:.2f}",
                f"{metricas_detalhadas['TESTEMUNHA']['nh3_max']:.2f}",
                f"{metricas_detalhadas['TESTEMUNHA']['temp_media']:.1f}",
                f"{metricas_detalhadas['TESTEMUNHA']['umid_media']:.1f}",
                f"{metricas_detalhadas['TESTEMUNHA']['n_medicoes']:,}",
                f"{metricas_detalhadas['TESTEMUNHA']['dias_monitoramento']}"
            ]
        })
        st.dataframe(df_comparacao, width='stretch')

# Matriz de correla√ß√£o
st.subheader('Matriz de Correla√ß√£o')
col1, col2 = st.columns(2)

with col1:
    st.plotly_chart(
        criar_matriz_correlacao(dados_filtrados, tratamento='DIATEX'),
        width='stretch'
    )

with col2:
    st.plotly_chart(
        criar_matriz_correlacao(dados_filtrados, tratamento='TESTEMUNHA'),
        width='stretch'
    )

# An√°lise por idade/semana
st.subheader('An√°lise por Idade/Semana')

visualizacao = st.radio('Visualizar por:', ['Idade (dias)', 'Semana de vida'])

if visualizacao == 'Idade (dias)':
    dados_por_idade = dados_filtrados.groupby(['idade_lote', 'teste'])[['NH3', 'Temperatura', 'Humedad']].mean().reset_index()
    fig = make_subplots(rows=3, cols=1, subplot_titles=('NH3 por Idade', 'Temperatura por Idade', 'Umidade por Idade'),
                        shared_xaxes=True, vertical_spacing=0.1)
    for i, var in enumerate(['NH3', 'Temperatura', 'Humedad']):
        for tratamento in ['DIATEX', 'TESTEMUNHA']:
            dados_trat = dados_por_idade[dados_por_idade['teste'] == tratamento]
            fig.add_trace(go.Scatter(x=dados_trat['idade_lote'], y=dados_trat[var], mode='lines+markers',
                                     name=f'{tratamento} - {var}',
                                     line=dict(color='#1f77b4' if tratamento == 'DIATEX' else '#ff7f0e'),
                                     legendgroup=tratamento, showlegend=(i==0)), row=i+1, col=1)
    fig.update_layout(height=800, title_text='Vari√°veis por Idade das Aves', legend_title_text='Tratamento')
    st.plotly_chart(fig, width='stretch')
    
else:  # Semana de vida
    dados_por_semana = dados_filtrados.groupby(['semana_vida', 'teste'])[['NH3', 'Temperatura', 'Humedad']].mean().reset_index()
    fig = make_subplots(rows=3, cols=1, subplot_titles=('NH3 por Semana', 'Temperatura por Semana', 'Umidade por Semana'),
                        shared_xaxes=True, vertical_spacing=0.1)
    for i, var in enumerate(['NH3', 'Temperatura', 'Humedad']):
        for tratamento in ['DIATEX', 'TESTEMUNHA']:
            dados_trat = dados_por_semana[dados_por_semana['teste'] == tratamento]
            fig.add_trace(go.Scatter(x=dados_trat['semana_vida'], y=dados_trat[var], mode='lines+markers',
                                     name=f'{tratamento} - {var}',
                                     line=dict(color='#1f77b4' if tratamento == 'DIATEX' else '#ff7f0e'),
                                     legendgroup=tratamento, showlegend=(i==0)), row=i+1, col=1)
    fig.update_layout(height=800, title_text='Vari√°veis por Semana de Vida das Aves', legend_title_text='Tratamento')
    st.plotly_chart(fig, width='stretch')

# Conclus√µes e Relat√≥rio Final
st.header('üìã Conclus√µes e Relat√≥rio Final')

# Aplicar filtro de tratamento espec√≠fico para conclus√µes
dados_conclusoes = dados_filtrados.copy()
if filtro_tratamento_especifico:
    dados_conclusoes = dados_conclusoes[dados_conclusoes['teste'] == filtro_tratamento_especifico]

# An√°lises estat√≠sticas completas
medias_nh3 = dados_conclusoes.groupby('teste')['NH3'].mean()
medias_temp = dados_conclusoes.groupby('teste')['Temperatura'].mean()
medias_umid = dados_conclusoes.groupby('teste')['Humedad'].mean()

resultado_nh3 = realizar_teste_t(dados_conclusoes, 'NH3')
resultado_temp = realizar_teste_t(dados_conclusoes, 'Temperatura')
resultado_umid = realizar_teste_t(dados_conclusoes, 'Humedad')

if 'DIATEX' in medias_nh3 and 'TESTEMUNHA' in medias_nh3:
    # M√©tricas principais
    diff_nh3 = ((medias_nh3['DIATEX'] - medias_nh3['TESTEMUNHA']) / medias_nh3['TESTEMUNHA']) * 100
    diff_temp = ((medias_temp['DIATEX'] - medias_temp['TESTEMUNHA']) / medias_temp['TESTEMUNHA']) * 100
    diff_umid = ((medias_umid['DIATEX'] - medias_umid['TESTEMUNHA']) / medias_umid['TESTEMUNHA']) * 100
    
    # Dashboard de m√©tricas finais
    st.subheader("üìä Resumo Executivo")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "Efic√°cia NH3",
            f"{abs(diff_nh3):.1f}%",
            delta=f"{'Redu√ß√£o' if diff_nh3 < 0 else 'Aumento'}"
        )
    
    with col2:
        st.metric(
            "Diferen√ßa Temperatura",
            f"{abs(diff_temp):.1f}%",
            delta=f"{'Menor' if diff_temp < 0 else 'Maior'}"
        )
    
    with col3:
        st.metric(
            "Diferen√ßa Umidade", 
            f"{abs(diff_umid):.1f}%",
            delta=f"{'Menor' if diff_umid < 0 else 'Maior'}"
        )
    
    # An√°lise detalhada
    st.subheader("üìà An√°lise Detalhada")
    
    st.markdown(f"""
    ### üéØ Resultados Principais
    
    #### **Am√¥nia (NH3) - Vari√°vel Principal**
    - **DIATEX**: {medias_nh3['DIATEX']:.2f} ppm (m√©dia)
    - **TESTEMUNHA**: {medias_nh3['TESTEMUNHA']:.2f} ppm (m√©dia)
    - **Diferen√ßa**: {diff_nh3:.2f}% ({medias_nh3['DIATEX'] - medias_nh3['TESTEMUNHA']:.2f} ppm)
    - **An√°lise Estat√≠stica**: {resultado_nh3['interpretacao']}
    
    #### **Temperatura**
    - **DIATEX**: {medias_temp['DIATEX']:.1f}¬∞C (m√©dia)
    - **TESTEMUNHA**: {medias_temp['TESTEMUNHA']:.1f}¬∞C (m√©dia)
    - **Diferen√ßa**: {diff_temp:.2f}%
    - **An√°lise Estat√≠stica**: {resultado_temp['interpretacao']}
    
    #### **Umidade**
    - **DIATEX**: {medias_umid['DIATEX']:.1f}% (m√©dia)
    - **TESTEMUNHA**: {medias_umid['TESTEMUNHA']:.1f}% (m√©dia)
    - **Diferen√ßa**: {diff_umid:.2f}%
    - **An√°lise Estat√≠stica**: {resultado_umid['interpretacao']}
    """)
    
    # Conclus√£o final baseada em crit√©rios rigorosos
    st.subheader("üèÜ Conclus√£o Final")
    
    # Crit√©rios de avalia√ß√£o
    eficacia_significativa = resultado_nh3['significativo'] and diff_nh3 < -5  # Redu√ß√£o de pelo menos 5%
    eficacia_moderada = resultado_nh3['significativo'] and -5 <= diff_nh3 < 0
    ineficaz = resultado_nh3['significativo'] and diff_nh3 >= 0
    inconclusivo = not resultado_nh3['significativo']
    
    if eficacia_significativa:
        st.success(f"""
        ### ‚úÖ DIATEX DEMONSTRA EFIC√ÅCIA SIGNIFICATIVA
        
        **Principais achados:**
        - Redu√ß√£o estatisticamente significativa de {abs(diff_nh3):.1f}% nos n√≠veis de NH3
        - P-valor: {resultado_nh3['p_valor']:.4f} (< 0.05)
        - Benef√≠cio claro para o ambiente avi√°rio
        
        **Recomenda√ß√£o:** Implementa√ß√£o do produto DIATEX √© recomendada.
        """)
    elif eficacia_moderada:
        st.warning(f"""
        ### ‚ö†Ô∏è DIATEX APRESENTA EFIC√ÅCIA MODERADA
        
        **Principais achados:**
        - Redu√ß√£o estatisticamente significativa de {abs(diff_nh3):.1f}% nos n√≠veis de NH3
        - P-valor: {resultado_nh3['p_valor']:.4f} (< 0.05)
        - Benef√≠cio presente, mas limitado
        
        **Recomenda√ß√£o:** Considerar implementa√ß√£o com monitoramento cont√≠nuo.
        """)
    elif ineficaz:
        st.error(f"""
        ### ‚ùå DIATEX N√ÉO DEMONSTRA EFIC√ÅCIA
        
        **Principais achados:**
        - Aumento de {abs(diff_nh3):.1f}% nos n√≠veis de NH3 vs controle
        - P-valor: {resultado_nh3['p_valor']:.4f} (< 0.05)
        - Produto n√£o atende aos objetivos
        
        **Recomenda√ß√£o:** N√£o implementar o produto. Revisar formula√ß√£o ou aplica√ß√£o.
        """)
    else:
        st.info(f"""
        ### ü§î RESULTADOS INCONCLUSIVOS
        
        **Principais achados:**
        - Diferen√ßa de {diff_nh3:.1f}% nos n√≠veis de NH3 (n√£o significativa)
        - P-valor: {resultado_nh3['p_valor']:.4f} (‚â• 0.05)
        - Dados insuficientes para conclus√£o definitiva
        
        **Recomenda√ß√£o:** Coletar mais dados ou revisar protocolo experimental.
        """)
    
    # Contexto adicional
    st.subheader("üìã Considera√ß√µes Adicionais")
    n_total = len(dados_conclusoes)
    periodo_estudo = (dados_conclusoes['Fecha'].max() - dados_conclusoes['Fecha'].min()).days
    
    st.markdown(f"""
    - **Tamanho da amostra**: {n_total:,} medi√ß√µes
    - **Per√≠odo de estudo**: {periodo_estudo} dias
    - **Avi√°rios monitorados**: {dados_conclusoes['aviario'].nunique()}
    - **Produtores envolvidos**: {dados_conclusoes['produtor'].nunique()}
    - **Linhagens testadas**: {dados_conclusoes['linhagem'].nunique()}
    """)
    
else:
    st.warning("‚ùå **Dados insuficientes para conclus√µes finais.**")
    st.markdown("*Requer dados de ambos os tratamentos (DIATEX e TESTEMUNHA) para an√°lise comparativa.*")

# Rodap√© aprimorado
agora_gmt3 = datetime.datetime.now() - timedelta(hours=3)
st.markdown("---")

# Se√ß√£o de exporta√ß√£o de dados
st.subheader("üìÅ Exportar Dados")
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("üìä Exportar Dados Filtrados"):
        csv = dados_filtrados.to_csv(index=False)
        st.download_button(
            label="Baixar CSV",
            data=csv,
            file_name=f"dados_diatex_filtrados_{datetime.date.today()}.csv",
            mime="text/csv"
        )

with col2:
    if st.button("üìà Exportar Estat√≠sticas"):
        stats_csv = estatisticas.to_csv()
        st.download_button(
            label="Baixar Estat√≠sticas CSV",
            data=stats_csv,
            file_name=f"estatisticas_diatex_{datetime.date.today()}.csv",
            mime="text/csv"
        )

with col3:
    if st.button("üìã Gerar Relat√≥rio"):
        st.info("Funcionalidade de relat√≥rio em PDF ser√° implementada em breve.")

# Informa√ß√µes do sistema
st.markdown(f"""
<div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-top: 20px;">
<h4>‚ÑπÔ∏è Informa√ß√µes do Sistema</h4>

<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
<div>
<strong>üìä Dados:</strong><br>
‚Ä¢ √öltima atualiza√ß√£o: {agora_gmt3.strftime('%d/%m/%Y %H:%M')} (GMT-3)<br>
‚Ä¢ Banco de dados: {os.path.basename(caminho_db)}<br>
‚Ä¢ Total de registros: {len(df):,}<br>
‚Ä¢ Per√≠odo de dados: {df['Fecha'].min().strftime('%d/%m/%Y')} a {df['Fecha'].max().strftime('%d/%m/%Y')}
</div>

<div>
<strong>üîß Tecnologias:</strong><br>
‚Ä¢ Streamlit {st.__version__}<br>
‚Ä¢ Python para an√°lise estat√≠stica<br>
‚Ä¢ Plotly para visualiza√ß√µes interativas<br>
‚Ä¢ SQLite para persist√™ncia de dados
</div>
</div>

<div style="text-align: center; margin-top: 15px; color: #666;">
<strong>Dashboard de An√°lise DIATEX</strong> - Sistema de monitoramento de efic√°cia em avi√°rios<br>
Desenvolvido para an√°lise cient√≠fica e tomada de decis√µes baseada em dados
</div>
</div>
""", unsafe_allow_html=True)

# Sidebar com informa√ß√µes adicionais
st.sidebar.markdown("---")
st.sidebar.markdown("### üîß Funcionalidades")
st.sidebar.markdown("""
**‚úÖ An√°lises Dispon√≠veis:**
- Estat√≠sticas descritivas
- Testes de signific√¢ncia (Teste T)
- An√°lise de tend√™ncias temporais
- An√°lise PCA multivariada
- Correla√ß√µes entre vari√°veis
- Alertas autom√°ticos

**üìä Visualiza√ß√µes:**
- Gr√°ficos de linha temporais
- Box plots por semana
- Scatter plots PCA
- Matrizes de correla√ß√£o
- M√©tricas de desempenho
""")

st.sidebar.markdown("---")
st.sidebar.info("""
**üí° Vers√£o Aprimorada**

Esta vers√£o inclui:
‚Ä¢ An√°lises estat√≠sticas avan√ßadas
‚Ä¢ Sistema de alertas inteligente  
‚Ä¢ M√©tricas de desempenho detalhadas
‚Ä¢ Interface melhorada
‚Ä¢ Exporta√ß√£o de dados

Acesse os dados diretamente do reposit√≥rio GitHub.
""")

# Link para documenta√ß√£o (se dispon√≠vel)
st.sidebar.markdown("---")
st.sidebar.markdown("### üìö Recursos")
st.sidebar.markdown("""
- [Documenta√ß√£o](https://github.com/seu-usuario/testeDiatexCama)
- [Reportar Bug](https://github.com/seu-usuario/testeDiatexCama/issues)
- [C√≥digo Fonte](https://github.com/seu-usuario/testeDiatexCama)
""")